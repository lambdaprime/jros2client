// include xfunction for updateVersion
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.github.lambdaprime:id.xfunction:14.0"
    }
}

plugins {
    id 'java'
    id 'com.diffplug.spotless'
}

apply plugin : 'eclipse'

eclipse.classpath.file {
    // because we disable inferModulePath later we intruct eclipse plugin
    // to put everything to module path
    whenMerged {
        entries.findAll { it.kind == 'lib' }.each { it.entryAttributes['module'] = 'true' }
    }
}

// Excluding transient dependencies which are not used
configurations {
    implementation {
        exclude(group: 'xml-apis', module: 'xml-apis')
        exclude(group: 'junit', module: 'junit')
        exclude(group: 'log4j', module: 'log4j')
        exclude(group: 'javax.servlet', module: 'servlet-api')
    }
    apiElements {
        exclude(group: 'xml-apis', module: 'xml-apis')
        exclude(group: 'junit', module: 'junit')
        exclude(group: 'log4j', module: 'log4j')
        exclude(group: 'javax.servlet', module: 'servlet-api')
    }
}

dependencies {
    implementation 'org.apache.xmlrpc:xmlrpc-client:3.1.3'
    implementation 'org.apache.xmlrpc:xmlrpc-server:3.1.3'
    implementation 'io.github.lambdaprime:jrosclient.core:1.0'
    implementation 'io.github.lambdaprime:jrosmessages:1.0'
    implementation 'io.github.lambdaprime:id.xfunction:16.0-SNAPSHOT'
    implementation 'io.github.lambdaprime:ICE:2.0'
    implementation 'io.github.lambdaprime:kineticstreamer:3.0'

    // transitively export following dependency to tests project
    apiElements 'org.apache.xmlrpc:xmlrpc-client:3.1.3'
    apiElements 'org.apache.xmlrpc:xmlrpc-server:3.1.3'
    apiElements 'io.github.lambdaprime:jrosclient.core:1.0'
    apiElements 'io.github.lambdaprime:jrosmessages:1.0'
    apiElements 'io.github.lambdaprime:id.xfunction:16.0-SNAPSHOT'
    apiElements 'io.github.lambdaprime:ICE:2.0'
    apiElements 'io.github.lambdaprime:kineticstreamer:3.0'
}

sourceCompatibility = '17'
targetCompatibility = '17'

java {
    // disable Gradle modularity support since it is not working properly
    // for non modules like xmlrpc and setup module path manually later:
    // https://github.com/gradle/gradle/issues/17609
    // https://github.com/gradle/gradle/issues/12630
    modularity.inferModulePath = false
}

compileJava {
    doFirst {
        options.compilerArgs = [
            '--module-path', classpath.asPath
        ]
        classpath = files()
    }
}

jar {
    manifest { 
        attributes 'Implementation-Version': "${rootProject.version}"
    }
}

sourceSets {
    main {
        java {
            srcDirs += ["src/main/gen/java"]
        }
    }
}

javadoc {
    options.modulePath = classpath.getFiles().stream()
        .collect(java.util.stream.Collectors.toList())
    exclude 'id/jros2client/app/**'
    options.noTimestamp = true
    options.noQualifiers = ["all"]
    options.noTree = true
    options.noIndex = true
    options.noNavBar = true
    // ignore missing @return, @param etc
    options.addBooleanOption('Xdoclint:all,-missing', true)
}

def packageDir = "$buildDir/package/${projectName}"

task createRelease(type: Zip) {
    archiveFileName = "$releaseFileName"
    destinationDirectory = file("$projectDir/release")
    from file("$packageDir/..")
}

task copyLibs(type: Copy) {
    from configurations.runtimeClasspath
    from jar.archiveFile
    into "${packageDir}/libs"
}

task copySamples(type: Copy) {
    from("${project.rootDir}/jros2client.samples/src") {
        include "**"
    }
    into "${packageDir}/samples"
}

task createPackage(type: Copy, dependsOn: [copyLibs, copySamples]) {
    from "${project.rootDir}/README.md"
    from "${project.rootDir}/LICENSE-2.0.txt"
    from file("$projectDir/src/jros2client")
    into packageDir
}

task cleanRelease(type: Delete) {
    delete "$projectDir/release"
}

createRelease.dependsOn createPackage, javadoc
assemble.dependsOn createRelease
clean.dependsOn cleanRelease

// run spotless and format code before the build
classes.dependsOn spotlessApply

if (project.hasProperty('publish')) {

  // update version only during publishing
  task updateVersion() {
      if (version.contains("SNAPSHOT")) return;
      println "Updating version to " + version
      new id.xfunction.text.Substitutor()
          .withRegexpSupport()
          .substitute(java.nio.file.Paths.get("${project.rootDir}/README.md"), Map.of(
              "io.github.lambdaprime:jros2client:[0-9.]+", "io.github.lambdaprime:jros2client:" + version
          ));
  }
  createPackage.dependsOn updateVersion

  // Initially it was taken from https://central.sonatype.org/publish/publish-gradle/
  // but since Gradle removed this plugin https://docs.gradle.org/7.0/userguide/upgrading_version_6.html#removal_of_the_legacy_maven_plugin
  // it was rewritten for new one

  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from "README-javadoc.txt"
  }

  task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from "README-sources.txt"
  }

  java {
    withJavadocJar()
    withSourcesJar()
  }

  apply plugin: 'maven-publish'

  publishing {
    publications {
      mavenJava(MavenPublication) {
        artifactId = 'jros2client'
        groupId = 'io.github.lambdaprime'
        from components.java
        pom {
          name = 'jros2client'
          description = 'Java module to interact with ROS 2 (Robot Operating System)'
          url = 'http://portal2.atwebpages.com/jros2client'

          licenses {
            license {
              name = 'The Apache License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }

          developers {
            developer {
              id = 'lambdaprime'
              email = 'intid@protonmail.com'
            }
          }

          scm {
            url = 'https://github.com/lambdaprime/jros2client'
          }
        }
      }
    }
    repositories {
      maven {
        credentials {
          username ossrhUsername
          password ossrhPassword
        }
        url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
      }
    }    
  }

  if (project.hasProperty('signing.secretKeyRingFile')) {
    apply plugin: 'signing'

    signing {
      sign publishing.publications.mavenJava
    }
  }
}
